{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SeriesModel from '../../model/Series.js';\nimport createSeriesData from '../helper/createSeriesData.js';\nimport { each } from 'zrender/lib/core/util.js';\n\nvar BaseBarSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(BaseBarSeriesModel, _super);\n\n  function BaseBarSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = BaseBarSeriesModel.type;\n    return _this;\n  }\n\n  BaseBarSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesData(null, this, {\n      useEncodeDefaulter: true\n    });\n  };\n\n  BaseBarSeriesModel.prototype.getMarkerPosition = function (value, dims, startingAtTick) {\n    var coordSys = this.coordinateSystem;\n\n    if (coordSys && coordSys.clampData) {\n      // PENDING if clamp ?\n      var pt_1 = coordSys.dataToPoint(coordSys.clampData(value));\n\n      if (startingAtTick) {\n        each(coordSys.getAxes(), function (axis, idx) {\n          // If axis type is category, use tick coords instead\n          if (axis.type === 'category') {\n            var tickCoords = axis.getTicksCoords();\n            var tickIdx = coordSys.clampData(value)[idx]; // The index of rightmost tick of markArea is 1 larger than x1/y1 index\n\n            if (dims && (dims[idx] === 'x1' || dims[idx] === 'y1')) {\n              tickIdx += 1;\n            }\n\n            tickIdx > tickCoords.length - 1 && (tickIdx = tickCoords.length - 1);\n            tickIdx < 0 && (tickIdx = 0);\n            tickCoords[tickIdx] && (pt_1[idx] = axis.toGlobalCoord(tickCoords[tickIdx].coord));\n          }\n        });\n      } else {\n        var data = this.getData();\n        var offset = data.getLayout('offset');\n        var size = data.getLayout('size');\n        var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n        pt_1[offsetIndex] += offset + size / 2;\n      }\n\n      return pt_1;\n    }\n\n    return [NaN, NaN];\n  };\n\n  BaseBarSeriesModel.type = 'series.__base_bar__';\n  BaseBarSeriesModel.defaultOption = {\n    // zlevel: 0,\n    z: 2,\n    coordinateSystem: 'cartesian2d',\n    legendHoverLink: true,\n    // stack: null\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    barMinHeight: 0,\n    barMinAngle: 0,\n    // cursor: null,\n    large: false,\n    largeThreshold: 400,\n    progressive: 3e3,\n    progressiveChunkMode: 'mod'\n  };\n  return BaseBarSeriesModel;\n}(SeriesModel);\n\nSeriesModel.registerClass(BaseBarSeriesModel);\nexport default BaseBarSeriesModel;","map":{"version":3,"names":["__extends","SeriesModel","createSeriesData","each","BaseBarSeriesModel","_super","_this","apply","arguments","type","prototype","getInitialData","option","ecModel","useEncodeDefaulter","getMarkerPosition","value","dims","startingAtTick","coordSys","coordinateSystem","clampData","pt_1","dataToPoint","getAxes","axis","idx","tickCoords","getTicksCoords","tickIdx","length","toGlobalCoord","coord","data","getData","offset","getLayout","size","offsetIndex","getBaseAxis","isHorizontal","NaN","defaultOption","z","legendHoverLink","barMinHeight","barMinAngle","large","largeThreshold","progressive","progressiveChunkMode","registerClass"],"sources":["/Users/liziyu/Desktop/STORAGE/Cloud/STALCO/node_modules/echarts/lib/chart/bar/BaseBarSeries.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SeriesModel from '../../model/Series.js';\nimport createSeriesData from '../helper/createSeriesData.js';\nimport { each } from 'zrender/lib/core/util.js';\n\nvar BaseBarSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(BaseBarSeriesModel, _super);\n\n  function BaseBarSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = BaseBarSeriesModel.type;\n    return _this;\n  }\n\n  BaseBarSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesData(null, this, {\n      useEncodeDefaulter: true\n    });\n  };\n\n  BaseBarSeriesModel.prototype.getMarkerPosition = function (value, dims, startingAtTick) {\n    var coordSys = this.coordinateSystem;\n\n    if (coordSys && coordSys.clampData) {\n      // PENDING if clamp ?\n      var pt_1 = coordSys.dataToPoint(coordSys.clampData(value));\n\n      if (startingAtTick) {\n        each(coordSys.getAxes(), function (axis, idx) {\n          // If axis type is category, use tick coords instead\n          if (axis.type === 'category') {\n            var tickCoords = axis.getTicksCoords();\n            var tickIdx = coordSys.clampData(value)[idx]; // The index of rightmost tick of markArea is 1 larger than x1/y1 index\n\n            if (dims && (dims[idx] === 'x1' || dims[idx] === 'y1')) {\n              tickIdx += 1;\n            }\n\n            tickIdx > tickCoords.length - 1 && (tickIdx = tickCoords.length - 1);\n            tickIdx < 0 && (tickIdx = 0);\n            tickCoords[tickIdx] && (pt_1[idx] = axis.toGlobalCoord(tickCoords[tickIdx].coord));\n          }\n        });\n      } else {\n        var data = this.getData();\n        var offset = data.getLayout('offset');\n        var size = data.getLayout('size');\n        var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n        pt_1[offsetIndex] += offset + size / 2;\n      }\n\n      return pt_1;\n    }\n\n    return [NaN, NaN];\n  };\n\n  BaseBarSeriesModel.type = 'series.__base_bar__';\n  BaseBarSeriesModel.defaultOption = {\n    // zlevel: 0,\n    z: 2,\n    coordinateSystem: 'cartesian2d',\n    legendHoverLink: true,\n    // stack: null\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    barMinHeight: 0,\n    barMinAngle: 0,\n    // cursor: null,\n    large: false,\n    largeThreshold: 400,\n    progressive: 3e3,\n    progressiveChunkMode: 'mod'\n  };\n  return BaseBarSeriesModel;\n}(SeriesModel);\n\nSeriesModel.registerClass(BaseBarSeriesModel);\nexport default BaseBarSeriesModel;"],"mappings":"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"},"metadata":{},"sourceType":"module"}