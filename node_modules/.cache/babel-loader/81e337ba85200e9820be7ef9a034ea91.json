{"ast":null,"code":"// file.js\nimport RNFS from 'react-native-fs';\nimport moment from 'moment';\nimport { Platform } from 'react-native'; // 文件路径\n\nconst defaultPath = (Platform.OS === 'ios' ? RNFS.MainBundlePath : RNFS.DocumentDirectoryPath) + '/data';\nconst destPath = defaultPath + '/test';\nconst splitStr = '20191115###';\n\nclass FileUtil {\n  constructor() {\n    this.isExistFile = async (filePath, cb) => {\n      return await RNFS.exists(filePath).then(res => {\n        console.log('isExists, ' + res);\n        cb && cb(res);\n        return res;\n      });\n    };\n  }\n\n  async writeFile(data, filename) {\n    const isDir = await this.mkDir(); // console.log(isDir, 'dir')\n\n    if (!isDir) {\n      return false;\n    } // data.createTime = +new Date();\n\n\n    const jsonStr = JSON.stringify(Object.assign({}, data, {\n      createTime: +new Date()\n    })); // const today = moment().startOf('day').valueOf();\n\n    let filePath = defaultPath + '/';\n\n    if (filename) {\n      filePath += filename;\n    } else {\n      const today = moment().valueOf();\n      filePath += today + '.txt';\n    } // 判断文件是否存在\n\n\n    const isExists = await this.isExistFile(filePath);\n\n    if (!isExists) {\n      return await RNFS.writeFile(filePath, jsonStr, 'utf8').then(success => {\n        console.log('FILE WRITTEN!');\n        return success;\n      }).catch(err => {\n        console.log(err.message);\n      });\n    } else {\n      return await this.appendFile(jsonStr, filePath);\n    }\n  } // 向文件中添加内容\n\n\n  async appendFile(data, path) {\n    const jsonStr = JSON.stringify(data);\n    return await RNFS.appendFile(path, splitStr + jsonStr, 'utf8').then(success => {\n      console.log('FILE APPEND SUCCESS');\n      return success;\n    }).catch(err => {\n      console.log(err.message);\n    });\n  } // 判断文件是否存在\n\n\n  // 读取文件\n  async readFile(filePath, name, successCallback, failCallback) {\n    const isExists = await this.isExistFile(filePath);\n    if (!isExists) return;\n    return await RNFS.readFile(filePath, 'utf8').then(result => {\n      // Alert.alert(result)\n      // console.log('=================file read start===================')\n      const res = result.indexOf(splitStr) > -1 ? result.split(splitStr) : [result]; // console.log(res)\n      // console.log('=================file read end===================')\n      // console.log(res.length, JSON.parse(res[0], 'ppppp'))\n\n      for (let i = 0, len = res.length; i < len; i++) {\n        res[i] = JSON.parse(res[i]);\n      } // console.log(res[2])\n\n\n      successCallback && successCallback(result);\n      return {\n        name,\n        content: res\n      };\n    }).catch(err => {\n      failCallback && failCallback(err.message);\n    });\n  }\n\n  async editFile(name, data) {\n    // 先删除文件，再创建\n    const filePath = defaultPath + '/' + name;\n    console.log(filePath, 'filePath edit');\n    const isExists = await this.isExistFile(filePath);\n    console.log('edit file exists is,', isExists);\n    await this.deleteFile(filePath); // 写入文件\n\n    return await this.writeFile(data.join(''), name);\n  } // 读取目录\n\n\n  async readDir() {\n    // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n    const res = await RNFS.readDir(defaultPath).then(result => {\n      const resP = [];\n\n      if (result && result.length > 0) {\n        result = result.filter(item => item.isFile());\n\n        for (let i = 0, len = result.length; i < len; i++) {\n          // resP[i] = RNFS.readFile(result[i].path, 'utf8')\n          resP[i] = this.readFile(result[i].path, result[i].name);\n        }\n      }\n\n      return Promise.all(resP);\n    }).then(statResult => {\n      return statResult;\n    }).catch(err => {\n      console.log(err.message, err.code);\n    });\n    console.log('+++++++++++++++++++++++++++++++++++++++++++++++++++');\n    console.log(res, 'end of read');\n    return res;\n  } // 读取目录\n\n\n  readDir1() {\n    RNFS.readDir(defaultPath) // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n    .then(result => {\n      console.log('GOT RESULT', result);\n      console.log('++++++++++++++++++++++++++++++++++++++++');\n      console.log(result.length);\n      console.log('================================================'); // stat the first file\n\n      return Promise.all([RNFS.stat(result[0].path), result[0].path]);\n    }).then(statResult => {\n      console.log(statResult);\n\n      if (statResult[0].isFile()) {\n        // if we have a file, read it\n        return RNFS.readFile(statResult[1], 'utf8');\n      }\n\n      return 'no file';\n    }).then(contents => {\n      // log the file contents\n      console.log('=======================================================');\n      console.log(contents, 'content');\n    }).catch(err => {\n      console.log(err.message, err.code);\n    });\n  } // 删除文件\n\n\n  async deleteFile(filePath) {\n    const path = filePath || defaultPath;\n    const res = await RNFS.unlink(path).then(() => {\n      console.log('FILE DELETED');\n    }).catch(err => {\n      console.log(err.message);\n    });\n    return res;\n  }\n\n  getPath() {\n    return 'file://'.concat(destPath);\n  } // 判断文件路径是否存在\n\n\n  isFilePathExists(successCallback) {\n    RNFS.exists(destPath).then(value => {\n      successCallback(value);\n    }).catch(err => {\n      console.log(err.message);\n    });\n  } // 复制文件\n\n\n  copyFile() {\n    RNFS.copyFile(defaultPath, destPath).then(() => {\n      console.log('COPY FILE SUCCESSED');\n    }).catch(err => {\n      console.log('copyFile Failed', err.message);\n    });\n  } // 移动文件\n\n\n  moveFile() {\n    RNFS.moveFile(defaultPath, destPath).then(() => {\n      console.log('moveFIle Success');\n    }).catch(err => {\n      console.log('moveFile failed', err);\n    });\n  }\n  /*创建目录*/\n\n\n  async mkDir() {\n    const options = {\n      NSURLIsExcludedFromBackupKey: true // iOS only\n\n    };\n    return await RNFS.mkdir(defaultPath, options).then(res => {\n      console.log('MKDIR success', res);\n      return true;\n    }).catch(err => {\n      console.log('err', err);\n    });\n  }\n\n}\n\nconst instance = new FileUtil();\nexport default instance;","map":{"version":3,"names":["RNFS","moment","Platform","defaultPath","OS","MainBundlePath","DocumentDirectoryPath","destPath","splitStr","FileUtil","isExistFile","filePath","cb","exists","then","res","console","log","writeFile","data","filename","isDir","mkDir","jsonStr","JSON","stringify","Object","assign","createTime","Date","today","valueOf","isExists","success","catch","err","message","appendFile","path","readFile","name","successCallback","failCallback","result","indexOf","split","i","len","length","parse","content","editFile","deleteFile","join","readDir","resP","filter","item","isFile","Promise","all","statResult","code","readDir1","stat","contents","unlink","getPath","concat","isFilePathExists","value","copyFile","moveFile","options","NSURLIsExcludedFromBackupKey","mkdir","instance"],"sources":["/Users/liziyu/Desktop/STORAGE/Cloud/STALCO_old/src/file.js"],"sourcesContent":["// file.js\nimport RNFS from 'react-native-fs';\nimport moment from 'moment';\nimport { Platform } from 'react-native';\n\n// 文件路径\nconst defaultPath = (Platform.OS === 'ios' ? RNFS.MainBundlePath : RNFS.DocumentDirectoryPath) + '/data'; \nconst destPath = defaultPath + '/test';\nconst splitStr = '20191115###';\n\nclass FileUtil {\n    async writeFile(data, filename) {\n        const isDir = await this.mkDir();\n        // console.log(isDir, 'dir')\n        if (!isDir) {\n            return false;\n        }\n\n        // data.createTime = +new Date();\n        const jsonStr = JSON.stringify(Object.assign({}, data, { createTime: +new Date() }));\n        // const today = moment().startOf('day').valueOf();\n        let filePath = defaultPath + '/';\n        if (filename) {\n            filePath += filename;\n        } else {\n            const today = moment().valueOf();\n            filePath += today + '.txt';\n        }\n        \n        // 判断文件是否存在\n        const isExists = await this.isExistFile(filePath);\n        if (!isExists) {\n            return await RNFS.writeFile(filePath, jsonStr, 'utf8')\n            .then((success) => {\n                console.log('FILE WRITTEN!');\n                return success;\n            })\n            .catch((err) => {\n                console.log(err.message);\n            })\n        } else {\n            return await this.appendFile(jsonStr, filePath);\n        }\n    }\n    // 向文件中添加内容\n    async appendFile(data, path) {\n        const jsonStr = JSON.stringify(data);\n        return await RNFS.appendFile(path, splitStr + jsonStr, 'utf8')\n            .then((success) => {\n                console.log('FILE APPEND SUCCESS');\n                return success;\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    // 判断文件是否存在\n    isExistFile = async (filePath, cb) => {\n        return await RNFS.exists(filePath)\n            .then(res => {\n                console.log('isExists, ' + res)\n                cb && cb(res);\n                return res;\n            });\n    };\n\n    // 读取文件\n    async readFile(filePath,name, successCallback, failCallback) {\n        const isExists = await this.isExistFile(filePath);\n        if (!isExists) return;\n\n        return await RNFS.readFile(filePath, 'utf8')\n            .then((result) => {\n                // Alert.alert(result)\n                // console.log('=================file read start===================')\n                const res = result.indexOf(splitStr) > -1 ? result.split(splitStr) : [result];\n\n                // console.log(res)\n                // console.log('=================file read end===================')\n                // console.log(res.length, JSON.parse(res[0], 'ppppp'))\n                for (let i = 0, len = res.length; i < len; i++) {\n                    res[i] = JSON.parse(res[i]);\n                }\n                // console.log(res[2])\n\n                successCallback && successCallback(result);\n                return {\n                    name,\n                    content: res,\n                };\n            })\n            .catch((err) => {\n                failCallback && failCallback(err.message)\n            });\n    }\n\n    async editFile(name, data) {\n        // 先删除文件，再创建\n        const filePath = defaultPath + '/' + name;\n        console.log(filePath, 'filePath edit')\n        const isExists = await this.isExistFile(filePath);\n        console.log('edit file exists is,', isExists);\n\n        await this.deleteFile(filePath);\n\n        // 写入文件\n        return await this.writeFile(data.join(''), name);\n    }\n\n    // 读取目录\n    async readDir() {\n        // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n        const res = await RNFS.readDir(defaultPath) \n            .then((result) => {\n\n                const resP = [];\n                if (result && result.length > 0) {\n                    result = result.filter(item => item.isFile());\n                    for (let i = 0, len = result.length; i < len; i++) {\n                        // resP[i] = RNFS.readFile(result[i].path, 'utf8')\n                        resP[i] = this.readFile(result[i].path, result[i].name);\n                    }\n                }\n                return Promise.all(resP);\n            })\n            .then((statResult) => {\n                return statResult;\n            })\n            .catch((err) => {\n                console.log(err.message, err.code);\n            });\n\n        console.log('+++++++++++++++++++++++++++++++++++++++++++++++++++')\n        console.log(res, 'end of read')\n        return res;\n    }\n\n    // 读取目录\n    readDir1() {\n        RNFS.readDir(defaultPath) // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n            .then((result) => {\n                console.log('GOT RESULT', result);\n                console.log('++++++++++++++++++++++++++++++++++++++++')\n                console.log(result.length)\n                console.log('================================================')\n\n                // stat the first file\n                return Promise.all([RNFS.stat(result[0].path), result[0].path]);\n            })\n            .then((statResult) => {\n                console.log(statResult)\n                if (statResult[0].isFile()) {\n                    // if we have a file, read it\n                    return RNFS.readFile(statResult[1], 'utf8');\n                }\n\n                return 'no file';\n            })\n            .then((contents) => {\n                // log the file contents\n                console.log('=======================================================')\n                console.log(contents, 'content');\n            })\n            .catch((err) => {\n                console.log(err.message, err.code);\n            });\n    }\n    // 删除文件\n    async deleteFile(filePath) {\n        const path = filePath || defaultPath;\n        const res = await RNFS.unlink(path)\n            .then(() => {\n                console.log('FILE DELETED');\n            })\n            .catch((err) => {\n                console.log(err.message);\n            })\n        return res;\n    }\n    getPath() {\n        return 'file://'.concat(destPath);\n    }\n    // 判断文件路径是否存在\n    isFilePathExists(successCallback) {\n        RNFS.exists(destPath)\n            .then((value) => {\n                successCallback(value);\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n    // 复制文件\n    copyFile() {\n        RNFS.copyFile(defaultPath, destPath)\n            .then(() => {\n                console.log('COPY FILE SUCCESSED');\n            })\n            .catch((err) => {\n                console.log('copyFile Failed', err.message);\n            });\n\n    }\n    // 移动文件\n    moveFile() {\n        RNFS.moveFile(defaultPath, destPath)\n            .then(() => {\n                console.log('moveFIle Success');\n            })\n            .catch((err) => {\n                console.log('moveFile failed', err);\n            });\n    }\n    /*创建目录*/\n    async mkDir() {\n        const options = {\n            NSURLIsExcludedFromBackupKey: true, // iOS only\n        };\n\n        return await RNFS.mkdir(defaultPath, options)\n            .then((res) => {\n                console.log('MKDIR success', res);\n                return true;\n            }).catch((err) => {\n                console.log('err', err);\n            });\n    }\n}\n\nconst instance = new FileUtil();\n\nexport default instance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}